@page "/sectionfields"
@using BlazorApp.Models
@using BlazorApp.Services

@rendermode InteractiveServer
@inject SectionFieldService SectionFieldService
@inject NavigationManager NavigationManager

<h3>SectionFields</h3>

@if (sectionFields == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-2" @onclick="CreateSectionField">Add SectionField</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Field</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sectionField in sectionFields)
            {
                <tr>
                    <td>@sectionField.Field?.Name</td>
                    <td>@sectionField.Name</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditSectionField(sectionField.SectionFieldId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteSectionField(sectionField.SectionFieldId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<SectionField>? sectionFields;

    protected override async Task OnInitializedAsync()
    {
        sectionFields =  SectionFieldService.GetAllSectionFieldsAsync();
    }

    private void CreateSectionField()
    {
        NavigationManager.NavigateTo("/sectionfield-edit");
    }

    private void EditSectionField(int id)
    {
        NavigationManager.NavigateTo($"/sectionfield-edit/{id}");
    }

    private async Task DeleteSectionField(int id)
    {
        await SectionFieldService.DeleteSectionFieldAsync(id);
        sectionFields =  SectionFieldService.GetAllSectionFieldsAsync();
    }
}
