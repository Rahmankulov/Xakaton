@page "/treeblock-edit/{TreeBlockId:int?}"
@using BlazorApp.Models
@using BlazorApp.Services
@using QRCoder
@using System.Drawing
@using System.Text

@rendermode InteractiveServer
@inject TreeBlockService TreeBlockService
@inject NavigationManager NavigationManager

<h3>@(TreeBlockId != null ? "Edit Tree Block" : "Add Tree Block")</h3>

<EditForm Model="@treeBlock" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Name">Name</label>
        <InputText id="Name" class="form-control" @bind-Value="treeBlock.Name" />
    </div>

    <div class="form-group">
        <label for="Name">Высота</label>
        <InputNumber id="Name" class="form-control" @bind-Value="treeBlock.Height" />
    </div>

    <div class="form-group">
        <label for="Name">Ширина</label>
        <InputNumber id="Name" class="form-control" @bind-Value="treeBlock.Width" />
    </div>

    <div class="form-group">
        <label for="Name">Расстояние между грядками</label>
        <InputNumber id="Name" class="form-control" @bind-Value="treeBlock.RowSpacing" />
    </div>
    <div class="form-group">
        <label for="Name">Расстояние между Деревями</label>
        <InputNumber id="Name" class="form-control" @bind-Value="treeBlock.ColSpacing" />
    </div>

    <div class="form-group">
        <label for="Field">SectionField</label>
        <InputSelect id="Field" class="form-control" @bind-Value="treeBlock.SectionFieldId">
            @foreach (var field in fields)
            {
                <option value="@field.SectionFieldId">@field.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-success" >Save</button>

</EditForm>

<button class="btn btn-primary" @onclick="GenerateQRCodes">Generate QR Codes</button>

@foreach (var qrCode in qrCodeBase64List)
{
    <img src="@($"data:image/svg+xml;base64,{@qrCode}")" alt="QR Code" width="60" height="60" />
}

@code {
    private TreeBlock treeBlock = new TreeBlock();
    private List<SectionField> fields = new List<SectionField>();
    [Parameter]
    public int? TreeBlockId { get; set; }

    List<string> qrCodeBase64List = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        fields = await TreeBlockService.GetAllSectionsAsync(); // Assuming you have a service to get all fields.

        if (TreeBlockId != null)
        {
            if (int.TryParse(NavigationManager.Uri.Split('/').LastOrDefault(), out int id)) TreeBlockId = id;
            treeBlock = await TreeBlockService.GetTreeBlockByIdAsync(TreeBlockId.Value);
        }
    }

    private async Task GenerateQRCodes()
    {
        //считывание количество деревя в одном блоке по ширине и высоте
        int rowCount = (int)(treeBlock.Width / treeBlock.RowSpacing);
        int colCount = (int)(treeBlock.Height / treeBlock.ColSpacing);
        treeBlock.LocationCount = rowCount * colCount;
        treeBlock.TreeLocations = new List<TreeLocation>();


        for(int i = 1 ; i <= rowCount; i++){
            for(int j = 1 ; j <= colCount; j++){
                TreeLocation treeLocation = new();
                treeLocation.RowId = i.ToString();
                treeLocation.ColId = j.ToString();
                string dataString = Guid.NewGuid().ToString();
                using (QRCodeGenerator qrGenerator = new QRCodeGenerator())
                using (QRCodeData qrCodeData = qrGenerator.CreateQrCode(dataString, QRCodeGenerator.ECCLevel.Q))
                using (SvgQRCode qrCode = new SvgQRCode(qrCodeData))
                {

                    string qrCodeImage = qrCode.GetGraphic(20); // 20 - размер пикселя
                    using (MemoryStream ms = new MemoryStream())
                    {
                        byte[] svgBytes = Encoding.UTF8.GetBytes(qrCodeImage);
                        ms.Write(svgBytes, 0, svgBytes.Length);
                        ms.Position = 0;
                        // Конвертация в Base64
                        string base64Image = Convert.ToBase64String(ms.ToArray());
                        treeLocation.QRCode = base64Image;
                        qrCodeBase64List.Add(base64Image);
                    }
                }
                treeLocation.LocationTreeStatus = Database.AgroContext.LocationTreeStatus.Available;
                
                treeBlock.TreeLocations.Add(treeLocation);

            }
        }
           


        
    }


    private async Task HandleValidSubmit()
    {
        if (TreeBlockId.HasValue)
        {
            await TreeBlockService.UpdateTreeBlockAsync(treeBlock);
        }
        else
        {
            await TreeBlockService.CreateTreeBlockAsync(treeBlock);
        }
        NavigationManager.NavigateTo("/blocks");
    }
}
